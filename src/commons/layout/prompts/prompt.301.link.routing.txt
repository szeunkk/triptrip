아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/commons/layout/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/commons/layout/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/commons/layout/hooks/index.link.routing.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/commons/layout/tests/index.link.routing.hook.spec.ts

===============================

기존히스토리-참고만) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 skip 대상
                - /products
                - /mypage
                - /(auth)/login
                - /(auth)/signup


기존히스토리-참고만) layout의 각 영역을 클릭시, url.ts의 페이지URL에 정의된 경로로 이동할 것.
            1) 경로: commons/constants/url.ts
            2) 조건
                - CSS는 cursor: pointer만 추가할 것.
                - 경로를 하드코딩하지 말고, url.ts를 import 하여 적용할 것.

            3) header 영역
                - 로고(logoArea): url.ts에 정의된 게시글목록페이지 => /boards
                - 트립토크: url.ts에 정의된 게시글목록페이지 => /boards
                - 숙박권구매: url.ts에 정의된 숙박권목록페이지 => /products
                - 마이페이지: url.ts에 정의된 숙박권목록페이지 => /mypage

===============================

핵심요구사항) header 메뉴를 클릭해서 이동 시, styles_tabActive의 CSS 액티브 상태가 변하지 않는데, 변경되도록 수정할 것.
