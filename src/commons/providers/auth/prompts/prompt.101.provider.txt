아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc

==============================================

조건-파일경로) 구현될 TSX 파일경로: src/commons/providers/auth/auth.provider.tsx

==============================================

조건-금지조건) ApolloClientProvider 수정 금지
조건-금지조건) url.ts 파일 수정 금지
조건-금지조건) AuthGuard, ModalProvider 코드 변경 금지

==============================================

조건-작업순서) 아래 순서를 참고하여 step-by-step 구현할 것.
            1) 지정된 경로에 AuthProvider 컴포넌트를 생성할 것.
            2) 로그인 상태와 사용자 정보를 전역 Context로 관리할 것.
            3) localStorage에 저장된 accessToken, user를 기준으로 상태를 초기화할 것.
            4) accessTokend이 존재하면 로그인 상태로 설정하고, 없으면 비로그인 상태로 설정할 것.
            5) accessToken의 만료 여부를 검사하여 만료 시 자동 로그아웃 처리할 것.
            6) 로그인, 로그아웃, 유저정보조회 기능을 Context로 제공할 것.
            7) url.ts의 로그인 경로를 import 하여 router.push() 또는 router.replace()로 이동시킬 것.
            8) layout.tsx 에서 <ApolloClientProvider /> 아래에 연결되도록 설계할 것.
            9) 구현 완료 후 체크리스트를 ✅/❌ 형식으로 반환할 것.

==============================================

핵심요구사항) 페이지URL 경로 관리 파일: /commons/constants/url.ts

핵심요구사항) 구현할 기능 목록
                - 로그인
                    1. url.ts에 정의된 로그인페이지로 이동할 것 => /login
                    2. 로그인 성공 시 redirect 파라미터가 존재하면 해당 경로로 이동할 것.
                    3. redirect 파라미터가 없을 경우 '/boards' 로 이동할 것.

                - 로그아웃
                    1. 로컬스토리지에 저장된 accessToken을 제거할 것.
                    2. 로컬스토리지에 저장된 user를 제거할 것.
                    2. url.ts에 정의된 로그인페이지로 이동할 것 => /login

                - 로그인상태검증 
                    1. 로컬스토리지에 저장된 accessToken이 있으면 로그인상태, 그렇지 않으면 비로그인상태로 처리할 것.
                    2. accessToken의 만료 여부는 주기적으로 검사하지 말 것.
                        - 단, 네트워크 요청 시 에러(Unauthenticated, TokenExpiredError)가 발생하면 자동 로그아웃 처리할 것.
                        - 로그아웃 시 localStorage에서 accessToken과 user를 제거 후, 로그인 페이지로 이동할 것.
                    3. 로그인 상태(isLoggedIn)가 변경될 때마다 전역적으로 반영될 수 있도록 Context로 관리할 것.
                    4. accessToken 검증 과정에서는 추가적인 서버 요청이나 주기적 검사 없이 JWT 유무만 활용할 것.

                - 로그인유저정보조회
                    1. 로컬스토리지에 저장된 user 객체를 Context 상태로 관리할 것.
                    2. 로그인 또는 로그아웃 이벤트 발생 시 user 상태를 즉시 갱신할 것.

핵심요구사항) 실제환경과 테스트환경을 구분할 것.
            - NEXT_PUBLIC_TEST_ENV=test 일 경우: 기본적으로 로그인 상태로 유지 (테스트 편의용)
            - 그 외 실제환경에서는 로컬스토리지의 토큰 유무를 기준으로 판단

==============================================

추가요구사항) 비로그인 상태에서 보호된 페이지(예: /boards/[boardId]) 접근 시, 현재 pathname(/boards/12345)을 redirect 파라미터로 포함하여 로그인 페이지로 이동할 것.
            예) /boards/12345 → /auth/login?redirect=/boards/12345
            - 로그인 성공 시 redirect 파라미터 값이 존재하면 해당 경로로 redirect할 것.
            - redirect 파라미터가 없을 경우 기본값 "/boards" 로 이동할 것.
            - 로그인 성공 시 router.replace(redirect) 사용으로 로그인 페이지 뒤로가기 방지.

추가요구사항) context로 관리할 상태:
            - isLoggedIn: boolean
            - user: IUser | null
            - login(): Promise<void>
            - logout(): void
            - checkAuth(): void

추가요구사항) context로 제공할 값:
            - { isLoggedIn, user, login, logout, checkAuth }